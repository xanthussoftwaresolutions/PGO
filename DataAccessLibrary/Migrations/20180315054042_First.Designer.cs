// <auto-generated />
using DataAccessLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(PgoDBContext))]
    [Migration("20180315054042_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccessLibrary.Model.Analysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CompanyId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.HasKey("AnalysisId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Analysis");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.AnalysisClass", b =>
                {
                    b.Property<int>("AnalysisClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnalysisId");

                    b.Property<int>("ClassId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.HasKey("AnalysisClassId");

                    b.HasIndex("AnalysisId");

                    b.ToTable("AnalysisClass");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.AnalysisClassCategory", b =>
                {
                    b.Property<int>("AnalysisClassCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnalysisClassId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectionMethodId");

                    b.Property<int>("Sequence");

                    b.HasKey("AnalysisClassCategoryId");

                    b.HasIndex("AnalysisClassId");

                    b.HasIndex("ProjectionMethodId");

                    b.ToTable("AnalysisClassCategory");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassCode");

                    b.Property<string>("Name");

                    b.HasKey("ClassId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumberMask");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int?>("CompanyTypeId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FirstMonthOfFiscalYear");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<bool>("UseAccountNumber");

                    b.Property<string>("ZipCode");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.CompanyType", b =>
                {
                    b.Property<int>("CompanyTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("CompanyTypeId");

                    b.ToTable("CompanyType");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.ProjectionMethod", b =>
                {
                    b.Property<int>("ProjectionMethodId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ProjectionMethodId");

                    b.ToTable("ProjectionMethod");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.RevenueExpenseData", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AnalysisClassCategoryId");

                    b.Property<string>("April");

                    b.Property<string>("Aug");

                    b.Property<string>("Dec");

                    b.Property<string>("Feb");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Jan");

                    b.Property<string>("July");

                    b.Property<string>("June");

                    b.Property<string>("March");

                    b.Property<string>("May");

                    b.Property<string>("Nov");

                    b.Property<string>("Oct");

                    b.Property<int>("PeriodType");

                    b.Property<string>("Q1");

                    b.Property<string>("Q2");

                    b.Property<string>("Q3");

                    b.Property<string>("Q4");

                    b.Property<string>("Sept");

                    b.Property<string>("Total");

                    b.Property<int>("year");

                    b.HasKey("BudgetId");

                    b.HasIndex("AnalysisClassCategoryId");

                    b.ToTable("RevenueExpenseData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.Analysis", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.Company", "Company")
                        .WithMany("Analysis")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.AnalysisClass", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.Analysis", "Analysis")
                        .WithMany("AnalysisClass")
                        .HasForeignKey("AnalysisId");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.AnalysisClassCategory", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.AnalysisClass", "AnalysisClass")
                        .WithMany("AnalysisClassCategory")
                        .HasForeignKey("AnalysisClassId");

                    b.HasOne("DataAccessLibrary.Model.ProjectionMethod", "ProjectionMethod")
                        .WithMany("AnalysisClassCategory")
                        .HasForeignKey("ProjectionMethodId");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.Company", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.CompanyType", "CompanyType")
                        .WithMany("Company")
                        .HasForeignKey("CompanyTypeId");
                });

            modelBuilder.Entity("DataAccessLibrary.Model.RevenueExpenseData", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.AnalysisClassCategory", "AnalysisClassCategory")
                        .WithMany("RevenueExpenseData")
                        .HasForeignKey("AnalysisClassCategoryId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataAccessLibrary.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLibrary.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
